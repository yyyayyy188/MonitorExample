//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2024/12/9 10:42:59
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using IntelligentMonitoringSystem.Domain.Shared.Contracts.Entities;
using Newtonsoft.Json;

namespace IntelligentMonitoringSystem.Domain.EventSources;

/// <summary>
///     事件源
/// </summary>
public class EventStream : AggregateRoot
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="EventStream" /> class.
    /// </summary>
    public EventStream()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="EventStream" /> class.
    /// </summary>
    /// <param name="streamId">事件Id</param>
    /// <param name="domainEvent">事件对象</param>
    /// <param name="isImmediateProcessing">是否理解处理</param>
    public EventStream(string streamId, IDomainEvent domainEvent, bool isImmediateProcessing = false)
    {
        Status = isImmediateProcessing ? 2 : 0;
        Type = domainEvent.GetType().Name;
        FullTypeName = domainEvent.GetType().AssemblyQualifiedName;
        StreamPosition = 1;
        ProcessCount = isImmediateProcessing ? 1 : 0;
        StreamId = streamId;
        Data = JsonConvert.SerializeObject(domainEvent);
    }

    /// <summary>
    ///     id
    /// </summary>
    public int Id { get; set; }

    /// <summary>
    ///     事件类型
    /// </summary>
    public string Type { get; set; }

    /// <summary>
    ///     类型全称
    /// </summary>
    public string FullTypeName { get; set; }

    /// <summary>
    ///     处理状态,0为等待处理,1为处理中,2为处理成功,3为处理失败,4超过最大处理次数
    /// </summary>
    public int Status { get; set; }

    /// <summary>
    ///     事件源Id, 注册事件的对象 ID（例如发票 ID）
    /// </summary>
    public string StreamId { get; set; }

    /// <summary>
    ///     流位置（也称为版本、发生顺序等）：用于决定特定对象（流）事件发生顺序的数字。
    /// </summary>
    public int StreamPosition { get; set; }

    /// <summary>
    ///     处理次数
    /// </summary>
    public int ProcessCount { get; set; }

    /// <summary>
    ///     创建事件
    /// </summary>
    public DateTime CreateTime { get; set; }

    /// <summary>
    ///     参数数据
    /// </summary>
    public string Data { get; set; }

    /// <summary>
    ///     最后处理时间
    /// </summary>
    public DateTime? LastProcessTime { get; set; }

    /// <summary>
    ///     处理消息
    /// </summary>
    public string Message { get; set; }
}